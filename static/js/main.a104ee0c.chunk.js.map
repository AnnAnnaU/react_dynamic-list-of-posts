{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/api.js","api/comments.js","components/PostDetails/PostDetails.jsx","api/posts.js","components/UserSelect/UserSelect.jsx","App.jsx","api/users.js","index.js"],"names":["PostsList","posts","selectedPostId","onselectedPostDetails","className","map","post","key","id","userId","title","type","onClick","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","error","setError","onSubmit","event","preventDefault","trim","value","placeholder","onChange","target","BASE_URL","request","url","fetch","then","response","json","result","data","getPostComments","postId","addNewComment","method","JSON","stringify","PostDetails","setPost","comments","setComments","hideComments","setHideComments","useEffect","getPostDetails","deleteComment","commentId","removeComment","length","comment","UserSelect","users","user","App","setUsers","setPosts","selectedUser","setSelectedUser","setSelectedPostId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a104ee0c.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const PostsList = ({ posts, selectedPostId, onselectedPostDetails }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li\n          key={post.id}\n          className=\"PostsList__item\"\n        >\n          <div>\n            <b>{`[User #${post.userId}]:`}</b>\n            {post.title}\n          </div>\n          <button\n            type=\"button\"\n            className={selectedPostId === post.id\n              ? 'PostsList__button--selected button'\n              : 'PostsList__button button'}\n            onClick={() => {\n              onselectedPostDetails(post.id);\n            }}\n          >\n            {selectedPostId === post.id ? 'Close' : 'Open'}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n\nPostsList.propTypes = {\n  posts: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    userId: PropTypes.number.isRequired,\n  })).isRequired,\n  selectedPostId: PropTypes.number.isRequired,\n  onselectedPostDetails: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\nimport PropTypes from 'prop-types';\n\nexport const NewCommentForm = ({ addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (name.trim() && email.trim() && body.trim()) {\n      addComment(name, email, body);\n      setName('');\n      setEmail('');\n      setBody('');\n      setError(false);\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setName(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setEmail(target.value);\n          }}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={({ target }) => {\n            setBody(target.value);\n          }}\n        />\n      </div>\n\n      {(error && (!name || !email || !body))\n        && (\n        <p className=\"NewCommentForm__error\">\n          Please, fill in all the fields\n        </p>\n        )\n      }\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  addComment: PropTypes.func.isRequired,\n};\n","export const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = url => fetch(`${BASE_URL}${url}`)\n  .then(response => response.json())\n  .then(result => result.data);\n\nexport const post = (url, data) => fetch(`${BASE_URL}${url}`, {\n  method: 'POST',\n  body: JSON.stringify(data),\n})\n  .then(response => response.json())\n  .then(result => result.data);\n","import { BASE_URL, post, request } from './api';\n\nexport const getPostComments = postId => request(`/comments?postId=${postId}`);\n\nexport const removeComment = commentId => fetch(\n  `${BASE_URL}/comments/${commentId}`, { method: 'DELETE' },\n);\n\nexport const addNewComment = (postId, name, email, body) => post(\n  '/comments', {\n    postId,\n    name,\n    email,\n    body,\n  },\n);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport {\n  getPostComments,\n  removeComment,\n  addNewComment,\n} from '../../api/comments';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, setPost] = useState(null);\n  const [comments, setComments] = useState('');\n  const [hideComments, setHideComments] = useState(false);\n\n  useEffect(() => {\n    getPostDetails(postId).then(setPost);\n    getPostComments(postId).then(setComments);\n  }, [postId]);\n\n  const deleteComment = (commentId) => {\n    removeComment(commentId)\n      .then(() => getPostComments(postId))\n      .then(setComments);\n  };\n\n  const addComment = (name, email, body) => {\n    addNewComment(postId, name, email, body)\n      .then(() => getPostComments(postId))\n      .then(setComments);\n  };\n\n  if (!post) {\n    return <p>No open post details</p>;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length > 0\n          ? (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setHideComments(!hideComments);\n              }}\n            >\n              {hideComments\n                ? `Show ${comments.length} comments`\n                : `Hide ${comments.length} comments`}\n            </button>\n          )\n          : <p>No comments yet</p>\n        }\n\n        {!hideComments\n          && (\n            <ul className=\"PostDetails__list\">\n              {comments.map(comment => (\n                <li\n                  key={comment.id}\n                  className=\"PostDetails__list-item\"\n                >\n\n                  <button\n                    type=\"button\"\n                    className=\"PostDetails__remove-button button\"\n                    onClick={() => {\n                      deleteComment(comment.id);\n                    }}\n                  >\n                    X\n                  </button>\n\n                  <p>{comment.body}</p>\n                </li>\n              ))}\n            </ul>\n          )\n        }\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            addComment={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getUserPosts = userId => request(`/posts?userId=${userId}`);\n\nexport const getPostDetails = postId => request(`/posts/${postId}`);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const UserSelect = ({ users, onChange }) => (\n  <label>\n    Select a user: &nbsp;\n\n    <select\n      className=\"App__user-selector\"\n      onChange={onChange}\n    >\n      <option value=\"0\">All users</option>\n      {users.map(user => (\n        <option\n          key={user.id}\n          value={user.id}\n        >\n          {user.name}\n        </option>\n      ))}\n    </select>\n  </label>\n);\n\nUserSelect.propTypes = {\n  users: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.string.isRequired,\n  })).isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelect } from './components/UserSelect';\nimport { getUsers } from './api/users';\nimport { getPosts, getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers().then(setUsers);\n  }, []);\n\n  const handleChange = ({ target }) => {\n    setSelectedUser(+target.value);\n  };\n\n  useEffect(() => {\n    if (selectedUser !== 0) {\n      getUserPosts(selectedUser).then(setPosts);\n    } else {\n      getPosts().then(setPosts);\n    }\n  }, [selectedUser]);\n\n  const onselectedPostDetails = (postId) => {\n    if (selectedPostId === postId) {\n      setSelectedPostId(0);\n    } else {\n      setSelectedPostId(postId);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <UserSelect\n          users={users}\n          onChange={handleChange}\n        />\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            selectedPostId={selectedPostId}\n            onselectedPostDetails={onselectedPostDetails}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <PostDetails\n            postId={selectedPostId}\n          />\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}